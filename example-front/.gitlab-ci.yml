# include:
#   - project: 'devops-rd/remote-pipeline'
#     file: '/templates/.complete-pipeline-template.yml'

variables:
  DOCKER_DRIVER: overlay2
  SPRING_PROFILES_ACTIVE: docker
  TAG_ENV_DEV: dev
  TAG_ENV: qa
  TAG_ENV_PROD: prod
  MIN_REP_DEV: 1
  MAX_REP_DEV: 1
  MIN_REP: 1
  MAX_REP: 1
  MIN_REP_PROD: 2
  MAX_REP_PROD: 2
  IS_API: "false"

stages:
  - install
  - test
  - build
  - package
  - deploy
  - automation test

install-dev:
  image: harbor.rd.com.br/devops/nodegit:1.0.0
  stage: install
  script:
    - npm install
  artifacts:
    paths:
      - node_modules
  tags:
    - docker
  only:
    - develop

test-sonar:
  image: harbor.rd.com.br/devops/nodegitsonar:1.0.0
  stage: test
  allow_failure: false
  variables:
    TAG_ENV: $TAG_ENV_DEV
    GIT_DEPTH: 0
  before_script:
    - export SKIP_PREFLIGHT_CHECK=true
    - sed -it "s|SONAR_LOGIN|$SONAR_LOGIN|g" sonar-project.properties
  script:
    - >
      VERSION=$(grep '"version":' package.json | grep -Eo "([0-9]{1,3}[\.]){2}[0-9]{1,3}");
    - npm run-script test:ci
    - /sonar-scanner/bin/sonar-scanner
  artifacts:
    paths:
      - node_modules
  tags:
    - docker
  only:
    - develop

build-dev:
  image: harbor.rd.com.br/devops/nodegit:1.0.0
  stage: build
  script:
    - npm run-script build:dev
  artifacts:
    paths:
      - build/
  tags:
    - docker
  only:
    - develop

package-dev:
  image: harbor.rd.com.br/devops/rd-dind:2.0.0
  stage: package
  before_script:
    - export TAG_ENV=$TAG_ENV_DEV
    - export VERSION=$(grep '"version":' package.json | grep -Eo "([0-9]{1,3}[\.]){2}[0-9]{1,3}")
    - export SPR_APP_NAME=$(cat package.json | grep name | head '-1' | awk '-F:' '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | cut -d '/' -f3-)
    - git clone http://$GITLAB_USER:$GITLAB_PASSW@git.raiadrogasil.com.br/devops-rd/config-pipeline.git
  script:
    - mv config-pipeline/$SPR_APP_NAME/Dockerfile .
    - sed -it "s|TAG_ENV|$TAG_ENV_DEV|g" Dockerfile
    - sed -it "s|VERSION|$VERSION|g" Dockerfile
    - sed -it "s|CI_PROJECT_NAME|$CI_PROJECT_NAME|g" Dockerfile
    - docker build -t harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA .
    - docker push harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  tags:
    - docker
  only:
    - develop

deploy-k8s-dev:
  image: harbor.rd.com.br/devops/kubectl:1.0.0
  stage: deploy
  before_script:
    - export KUBECONFIG=/home/config-dev
    - git clone http://$GITLAB_USER:$GITLAB_PASSW@git.raiadrogasil.com.br/devops-rd/config-pipeline.git
    - export TAG_ENV=$TAG_ENV_DEV
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | cut -d '/' -f3-)
    - export NMS_CI=$(kubectl get namespaces |grep $(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)\-$TAG_ENV_DEV | awk '{print $1}')
    - export SPR_APP_NAME=$(cat package.json | grep name | head '-1' | awk '-F:' '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    - export MIN_REP=$MIN_REP_DEV
    - export MAX_REP=$MAX_REP_DEV
    - export NEWRELIC_ENABLE=false
  script:
    - >
      if [ -z "$NMS_CI" ] && [ "$SPR_APP_NAME" == "configserver" ]; then
       export NMS_CI=$(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)-$TAG_ENV_DEV
       echo "Criando namespace $NMS_CI para configserver"
       kubectl create ns $NMS_CI
      elif [ -z "$NMS_CI" ] && [ "$SPR_APP_NAME" != "configserver" ]; then
       export NMS_CI=$(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)-$TAG_ENV_DEV
       echo "Criando namespace $NMS_CI para $SPR_APP_NAME"
       kubectl create ns $NMS_CI
      fi
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|SPR_APP_NAME|$SPR_APP_NAME|g"
    #- find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CONTEXT_PATH|$CONTEXT_PATH|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|TAG_ENV|$TAG_ENV_DEV|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|MIN_REP|$MIN_REP|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|MAX_REP|$MAX_REP|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CI_PROJECT_PATH|$CI_PROJECT_PATH|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|REF_COMMIT|$CI_COMMIT_SHORT_SHA|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|NEWRELIC_ENABLE|$NEWRELIC_ENABLE|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CI_PROJECT_NAMESPACE|$CI_PROJECT_NAMESPACE|g"
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/deployment.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/service.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/app-ingress-dev.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/HPA.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/secrets.yml -n $NMS_CI
    - kubectl set image deployment $SPR_APP_NAME-$TAG_ENV_DEV $SPR_APP_NAME-$TAG_ENV_DEV=harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA -n $NMS_CI
  dependencies: []
  tags:
    - docker
  only:
    - develop
  except:
    variables: [$IS_API == "true"]

######################### AMBIENTE QA #################################### AMBIENTE QA #######################################################################
######################### VVVVVVVVVVV #################################### VVVVVVVVVVV #######################################################################
install-qa:
  image: harbor.rd.com.br/devops/nodegit:1.0.0
  stage: install
  script:
    - npm install
  artifacts:
    paths:
      - node_modules
  tags:
    - docker
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /.*hotfix last commit.*/ || $CI_COMMIT_REF_NAME =~ /^release\/(0|[1-9]\d*).(0|[1-9]\d*).(0|[1-9]\d*)*$/'

build-qa:
  image: harbor.rd.com.br/devops/nodegit:1.0.0
  stage: build
  script:
    - npm run-script build:qa
  artifacts:
    paths:
      - build/
  tags:
    - docker
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /.*hotfix last commit.*/ || $CI_COMMIT_REF_NAME =~ /^release\/(0|[1-9]\d*).(0|[1-9]\d*).(0|[1-9]\d*)*$/'

package:
  image: harbor.rd.com.br/devops/rd-dind:2.0.0
  stage: package
  before_script:
    - export TAG_ENV=$TAG_ENV
    - export VERSION=$(grep '"version":' package.json | grep -Eo "([0-9]{1,3}[\.]){2}[0-9]{1,3}")
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | cut -d '/' -f3-)
    - export SPR_APP_NAME=$(cat package.json | grep name | head '-1' | awk '-F:' '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    - git clone http://$GITLAB_USER:$GITLAB_PASSW@git.raiadrogasil.com.br/devops-rd/config-pipeline.git
  script:
    - mv config-pipeline/$SPR_APP_NAME/Dockerfile .
    - sed -it "s|TAG_ENV|$TAG_ENV|g" Dockerfile
    - sed -it "s|VERSION|$VERSION|g" Dockerfile
    - sed -it "s|CI_PROJECT_NAME|$CI_PROJECT_NAME|g" Dockerfile
    - docker build -t harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA -t harbor.rd.com.br/$CI_PROJECT_PATH:$VERSION .
    - docker push harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
    - docker push harbor.rd.com.br/$CI_PROJECT_PATH:$VERSION
  tags:
    - docker
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /.*hotfix last commit.*/ || $CI_COMMIT_REF_NAME =~ /^release\/(0|[1-9]\d*).(0|[1-9]\d*).(0|[1-9]\d*)*$/'

deploy-k8s:
  image: harbor.rd.com.br/devops/kubectl:1.0.0
  stage: deploy
  before_script:
    - export KUBECONFIG=/home/config
    - git clone http://$GITLAB_USER:$GITLAB_PASSW@git.raiadrogasil.com.br/devops-rd/config-pipeline.git
    - export TAG_ENV=$TAG_ENV
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | cut -d '/' -f3-)
    - export NMS_CI=$(kubectl get namespaces |grep $(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)\-$TAG_ENV | awk '{print $1}')
    - export SPR_APP_NAME=$(cat package.json | grep name | head '-1' | awk '-F:' '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    - export VERSION=$(grep '"version":' package.json | grep -Eo "([0-9]{1,3}[\.]){2}[0-9]{1,3}")
    - export MIN_REP=$MIN_REP
    - export MAX_REP=$MAX_REP
    - export NEWRELIC_ENABLE=false
  script:
    - >
      if [ -z "$NMS_CI" ] && [ "$SPR_APP_NAME" == "configserver" ]; then
       export NMS_CI=$(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)-$TAG_ENV
       echo "Criando namespace $NMS_CI para configserver"
       kubectl create ns $NMS_CI
      elif [ -z "$NMS_CI" ] && [ "$SPR_APP_NAME" != "configserver" ]; then
       export NMS_CI=$(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)-$TAG_ENV
       echo "Criando namespace $NMS_CI para $SPR_APP_NAME"
       kubectl create ns $NMS_CI
      fi
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|SPR_APP_NAME|$SPR_APP_NAME|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CONTEXT_PATH|$CONTEXT_PATH|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|TAG_ENV|$TAG_ENV|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|MIN_REP|$MIN_REP|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|MAX_REP|$MAX_REP|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CI_PROJECT_PATH|$CI_PROJECT_PATH|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|REF_COMMIT|$CI_COMMIT_SHORT_SHA|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|NEWRELIC_ENABLE|$NEWRELIC_ENABLE|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CI_PROJECT_NAMESPACE|$CI_PROJECT_NAMESPACE|g"
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/deployment.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/service.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/app-ingress-qa.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/HPA.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/secrets.yml -n $NMS_CI
    - kubectl set image deployment $SPR_APP_NAME-$TAG_ENV $SPR_APP_NAME-$TAG_ENV=harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA -n $NMS_CI
  dependencies: []
  tags:
    - docker
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /.*hotfix last commit.*/ || $CI_COMMIT_REF_NAME =~ /^release\/(0|[1-9]\d*).(0|[1-9]\d*).(0|[1-9]\d*)*$/ && $IS_API =~ "false"'

automationtest-release:
  image: harbor.rd.com.br/devops/rubygit:2.0.0
  stage: automation test
  before_script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/raiadrogasil/rd/purchase/purchase-web-qa-automationtest.git
    - export TAG_ENV=$TAG_ENV
  script:
    - cd purchase-web-qa-automationtest
    - find cucumber.yml | xargs sed -i "s|TAG_ENV|$TAG_ENV|g"
    - bundle install
    - cucumber -t @purchase-simulator-bff -pqa BROWSER=linux
  artifacts:
    paths:
      - $CI_PROJECT_NAMESPACE-web-qa-automationtest/reports/report.html
  tags:
    - docker
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /.*hotfix last commit.*/ || $CI_COMMIT_REF_NAME =~ /^release\/(0|[1-9]\d*).(0|[1-9]\d*).(0|[1-9]\d*)*$/'

######################### AMBIENTE PROD #################################### AMBIENTE PROD #######################################################################
######################### VVVVVVVVVVVVV #################################### VVVVVVVVVVVVV #######################################################################

install-prod:
  image: harbor.rd.com.br/devops/nodegit:1.0.0
  stage: install
  script:
    - npm install
  artifacts:
    paths:
      - node_modules
  tags:
    - docker
  only:
    - master

build-prod:
  image: harbor.rd.com.br/devops/nodegit:1.0.0
  stage: build
  script:
    - npm run-script build:prod
  artifacts:
    paths:
      - build/
  tags:
    - docker
  only:
    - master

package-prod:
  image: harbor.rd.com.br/devops/rd-dind:2.0.0
  stage: package
  before_script:
    - export TAG_ENV=$TAG_ENV_PROD
    - export VERSION=$(grep '"version":' package.json | grep -Eo "([0-9]{1,3}[\.]){2}[0-9]{1,3}")
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | cut -d '/' -f3-)
    - export SPR_APP_NAME=$(cat package.json | grep name | head '-1' | awk '-F:' '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    - git clone http://$GITLAB_USER:$GITLAB_PASSW@git.raiadrogasil.com.br/devops-rd/config-pipeline.git
  script:
    - mv config-pipeline/$SPR_APP_NAME/Dockerfile .
    - sed -it "s|TAG_ENV|$TAG_ENV_PROD|g" Dockerfile
    - sed -it "s|VERSION|$VERSION|g" Dockerfile
    - sed -it "s|CI_PROJECT_NAME|$CI_PROJECT_NAME|g" Dockerfile
    - docker build -t harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA .
    - docker push harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  tags:
    - docker
  only:
    - master

deploy-k8s-prod:
  image: harbor.rd.com.br/devops/kubectl:1.0.0
  stage: deploy
  before_script:
    - export KUBECONFIG=/home/config-prd
    - git clone http://$GITLAB_USER:$GITLAB_PASSW@git.raiadrogasil.com.br/devops-rd/config-pipeline.git
    - export TAG_ENV=$TAG_ENV_PROD
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | cut -d '/' -f3-)
    - export NMS_CI=$(kubectl get namespaces |grep $(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)\-$TAG_ENV | awk '{print $1}')
    - export SPR_APP_NAME=$(cat package.json | grep name | head '-1' | awk '-F:' '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
    - export VERSION=$(grep '"version":' package.json | grep -Eo "([0-9]{1,3}[\.]){2}[0-9]{1,3}")
    - export MIN_REP=$MIN_REP_PROD
    - export MAX_REP=$MAX_REP_PROD
    - export NEWRELIC_ENABLE=true
  script:
    - >
      if [ -z "$NMS_CI" ] && [ "$SPR_APP_NAME" == "configserver" ]; then
       export NMS_CI=$(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)-$TAG_ENV
       echo "Criando namespace $NMS_CI para configserver"
       kubectl create ns $NMS_CI
      elif [ -z "$NMS_CI" ] && [ "$SPR_APP_NAME" != "configserver" ]; then
       export NMS_CI=$(echo $CI_PROJECT_NAMESPACE | cut -d '/' -f3)-$TAG_ENV
       echo "Criando namespace $NMS_CI para $SPR_APP_NAME"
       kubectl create ns $NMS_CI
      fi
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|SPR_APP_NAME|$SPR_APP_NAME|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CONTEXT_PATH|$CONTEXT_PATH|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|TAG_ENV|$TAG_ENV_PROD|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|MIN_REP|$MIN_REP|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|MAX_REP|$MAX_REP|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CI_PROJECT_PATH|$CI_PROJECT_PATH|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|REF_COMMIT|$VERSION|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|NEWRELIC_ENABLE|$NEWRELIC_ENABLE|g"
    - find config-pipeline/$SPR_APP_NAME/*.yml | xargs sed -i "s|CI_PROJECT_NAMESPACE|$CI_PROJECT_NAMESPACE|g"
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/deployment.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/service.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/app-ingress-prod.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/$SPR_APP_NAME/HPA.yml -n $NMS_CI
    - kubectl apply -f config-pipeline/secrets.yml -n $NMS_CI
    #- kubectl set image deployment $SPR_APP_NAME-$TAG_ENV_PROD $SPR_APP_NAME-$TAG_ENV_PROD=harbor.rd.com.br/$CI_PROJECT_PATH:$VERSION -n $NMS_CI
    - kubectl set image deployment $SPR_APP_NAME-$TAG_ENV $SPR_APP_NAME-$TAG_ENV=harbor.rd.com.br/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA -n $NMS_CI
    - sh config-pipeline/record_monitor_deployments.sh $SPR_APP_NAME $TAG_ENV_PROD $VERSION $CI_COMMIT_SHA $CI_PIPELINE_ID $GITLAB_USER_EMAIL
    - curl -sS -X POST  "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${VERSION}&ref=${CI_COMMIT_SHA}&private_token=${GITLAB_TOKEN}"
  when: manual
  dependencies: []
  tags:
    - docker
  only:
    - master
  except:
    variables: [$IS_API == "true"]
