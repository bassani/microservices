import { DISCOUNT_TYPE } from "../components/discount-modal/discount-modal.component";
import { IClassification } from "./classification.model";
import { IDistributionCenter, IProductCategory, IProductSubcategory, ISimulationType, IOrderType, IPaymentTermItem, ISupplier } from "./search-simulador";


  
  /** Represents the details of the draft of a simulation */
  export interface IDraftDetails {
    /** name of the draft */
    name: string;
    /** Text describing the deaft and to add final notes */
    description: string;
  }
  
  
  /** Interface describing every parameter a simulation might have to be able to start */
  export interface IBaseSimulation {
    /** Id of the simulation, present only when the simulation has been saved */
    id?: number;
    /** List of the distribution centers selected by the user */
    distributionCenters: IDistributionCenter[];

    /** List of suppliers selected by the user, is required in case no category or subcategory are present
     * but can be used in combination with categories and subcategories
     */
    suppliers?: ISupplier[];

    /** List of product categories selected by the user, is required in case no supplier is present
     * but can be used in combination with suppliers and subcategories
     */
    category?: IProductCategory[];
        
    /** List of product subcategories selected by the user, is required in case no supplier is present
     * but can be used in combination with suppliers and categories
     */
    subcategory?: IProductSubcategory[];

    /** One of the types of simulations available 
     * this parameter decides what custom fields will be present in the simulation
    */
    simulationType: ISimulationType;

    /** Id of the user which simulated, it is not being used
     * @deprecated
     */
    userId: number;

    /** type of order, selected by the user */
    orderType?: IOrderType;

    /** classification of the current simulation, selected by the user */
    classification?: IClassification;

    /** status of the simulation, only present after saving, and generated by the backend */
    status?: number;

    /** payment terms for this simulation */
    paymentTerm?: IPaymentTermItem;

    /** aditional note explaining the reason for this simulation or adding details as metadata */
    note?: string;

    /** 0 = venda, 1 = forecast semanal, 2 = forecast mensal */
    saleType?: 0 | 1 | 2;

    registerDate: Date;

    /** Amount of sales history days to take into account to simulated, selected by the user
     * examples include 90 "90 Days", 30 "30 Days" and so on
     */
    sale?: number;
    
    /** Discount object for the simulations, this is not required */
    discount?: IDiscount;

    /** Filter object to further refine and narrow the scope of the simulation */
    productFilter?: IProductFilter;

    /** Date to be antecipated, only used with the Antecipation simulation type */
    anticipationDate?: Date;

    /** Days of coverage for the distribution centers, only used with the Coverage simulation type */
    stockCoverageDC?: number;

    /** Total value of the simulation, only used with the By Value simulation type */
    amount?: number;
  }
  
  /**
   * Representation of the discount complex parameter
   * Includes structures for general applied discount as well as per SKU discount
   */
  export interface IDiscount {
    /** 0 = increase current discount by, 1 = replace current discount with, 2 = specify the discounts per product  */
    discountType: DISCOUNT_TYPE
    /** Discount amount in percentaje */
    discount?: number;
    /** 
     * SKUs array to specify discount per product
     * use it in combination with the discountType 2
    */
    skus: {
      skuId: number;
      /** 0 = adicionar, 1 = substituir */
      type: 0 | 1;
      /** Discount type: 0 = add to the current discount of this sku, 1 = replace with new value*/
      discountType?: Omit<DISCOUNT_TYPE, '2'>,
      /** SKU name (product name) */
      name?: string,
      /** discount amount */
      discount: number;
    }[];
  }
  
  /** Interface to represent the filters to be applied as parameters to a simulation
   * to refine and narrow the amount of products to process and account for
   */
  export interface IProductFilter {
    /**true = somente produtos inativos, false = nenhum produto inativo */
    inactive: boolean;
    /** null = desconsiderar campo, true = somente promopacks, false = nenhum promopack */
    promoPack?: boolean;
    /** null = desconsiderar campo, true = somente cotados, false = nenhum cotado */
    quoted?: boolean;
  }
  
  /**
   * Item SKUS, represents the discount item object
   * use it to define a discount type and amount for specific skus
   */
  export class ISkus {
    /** Id of the SKU (Product) */
    skuId: number;
    /** amount of the discount for this item */
    discount: number;
    /** type for this item, being increaseBy or replaceBy */
    discountType: 0 | 1;
  }
  
  /**
   * Base Simulation implementation
   * Use it to represent the Simulation Object with params before being sent to the
   * service to be processed, in other words, the representation of the parameters of the simulation by the frontend
   */
  export class BaseSimulation implements IBaseSimulation {
    id?: number;
    userId: number;
    description: string;
    distributionCenters: IDistributionCenter[];
    suppliers?: ISupplier[];
    category?: IProductCategory[];
    subcategory?: IProductSubcategory[];
    orderType?: IOrderType;
    classification?: IClassification;
    simulationType: ISimulationType;
    status?: number;
    registerDate: Date;
    updatedAt: Date;
    paymentTerm?: IPaymentTermItem;
    note?: string;
    /** 0 = venda, 1 = forecast semanal, 2 = forecast mensal */
    saleType?: 0 | 1 | 2;
    sale?: number;
    discount?: IDiscount;
    productFilter?: IProductFilter;
  
    anticipationDate?: Date;
    stockCoverageDC?: number;
    amount?: number;
    productDiscounts?: any[]
    constructor(config: any) {
      this.id = config.id;
      this.distributionCenters = config.distributionCenters;
      this.userId = config.userId;
      this.suppliers = config.suppliers;
      this.category = config.category;
      this.subcategory = config.subcategory;
      this.orderType = config.orderType;
      this.simulationType = config.simulationType;
      this.classification = config.classification;
      this.status = config.status || 1;
      this.registerDate = config.registerDate || new Date();
      this.updatedAt = config.updatedAt || new Date();
      this.paymentTerm = config.paymentTerm;
      this.note = config.note;
      this.saleType = config.saleType;
      this.sale= config.sale;
      this.discount= config.discount;
      this.productFilter= config.productFilter;
      this.productDiscounts= config.productDiscounts;
  
      this.anticipationDate = config.anticipationDate || undefined;
      this.stockCoverageDC = config.stockCoverageDC || undefined;
      this.amount = config.amount || undefined;
    }
  }

  /**
   * Simulation result interface, returned by the backend for finished simulations
   */  
  export interface SimulationResult extends Omit<BaseSimulation, 'simulationType'> {
    currentPaymentTerm: { name: string; id: number };
    deltaTermInDaysQuantity?: number;
    percentageGain?: number;
    regularTermInDaysQuantity?: number;
    newTermInDaysQuantity?: number;
    
    simulationType: number;
  }
  